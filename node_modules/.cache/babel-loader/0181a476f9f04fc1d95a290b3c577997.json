{"ast":null,"code":"'use strict';\n/*\nconf: {\n\tstates: [array], // an array of states\n        interval: [number], // update interval\n        init: [number], // initial index of states array to start with\n\tlastUpdate: [*number] // an optional timestamp to conrtol last update state\n\tloop: [*bool] // if true the progress of states will be a loop\n}\n*/\n\nfunction TimedState(conf) {\n  this.validate(conf);\n  this.conf = conf;\n  this.length = this.conf.states.length;\n  this.current = this.conf.init;\n  this.lastUpdate = this.conf.lastUpdate || Date.now();\n} // public\n\n\nTimedState.prototype.getState = function () {\n  var now = Date.now();\n  var timePast = now - this.lastUpdate;\n  var steps = Math.floor(timePast / this.conf.interval);\n  var nextPos = steps + this.current;\n\n  if (nextPos >= this.length) {\n    if (this.conf.loop) {\n      nextPos = steps + this.current - this.length;\n    } else {\n      // we don't loop and stop at the end of the state\n      nextPos = this.length - 1;\n    }\n  }\n\n  return this.conf.states[nextPos];\n}; // public\n\n\nTimedState.prototype.forward = function (value) {\n  if (!value) {\n    // if value is not given it defaults  to 1\n    value = 1;\n  }\n\n  if (!value || isNaN(value)) {\n    return false;\n  }\n\n  if (this.current + value >= this.length) {\n    return false;\n  }\n\n  if (this.current === this.conf.init) {\n    // initial mod\n    this.lastUpdate = Date.now();\n  } // move the current cursor of the array index forward\n\n\n  this.current += value;\n  this.lastUpdate = Date.now();\n  return true;\n}; // public\n\n\nTimedState.prototype.backward = function (value) {\n  if (!value) {\n    // if value is not given it defaults  to 1\n    value = 1;\n  }\n\n  if (!value || isNaN(value)) {\n    return false;\n  }\n\n  if (this.current - value < 0) {\n    return false;\n  }\n\n  if (this.current === this.conf.init) {\n    // initial mod\n    this.lastUpdate = Date.now();\n  } // move the current cursor of the array index backward\n\n\n  this.current -= value;\n  this.lastUpdate = Date.now();\n  return true;\n}; // public\n\n\nTimedState.prototype.reset = function () {\n  this.current = this.conf.init;\n  this.lastUpdate = Date.now();\n}; // public\n\n\nTimedState.prototype.getStates = function () {\n  return this.conf.states.map(function (elm) {\n    return elm;\n  });\n}; // public\n\n\nTimedState.prototype.getInterval = function () {\n  return this.conf.interval;\n}; // public\n\n\nTimedState.prototype.getLastUpdate = function () {\n  return this.lastUpdate;\n}; // public\n\n\nTimedState.prototype.toObject = function () {\n  var obj = {};\n  obj.current = this.current;\n  obj.lastUpdate = this.lastUpdate;\n\n  for (var key in this.conf) {\n    obj[key] = this.conf[key];\n  }\n\n  return obj;\n}; // private\n\n\nTimedState.prototype.validate = function (conf) {\n  if (!conf.hasOwnProperty('states') || !Array.isArray(conf.states) || conf.states.length === 0) {\n    throw new Error('invalid states: ' + conf.states);\n  }\n\n  if (!conf.hasOwnProperty('interval') || isNaN(conf.interval) || conf.interval <= 0) {\n    throw new Error('invalid interval: ' + conf.interval);\n  }\n\n  if (!conf.hasOwnProperty('init') || isNaN(conf.init) || conf.init < 0) {\n    throw new Error('invalid init: ' + conf.init);\n  }\n};\n\nmodule.exports = TimedState;","map":null,"metadata":{},"sourceType":"script"}