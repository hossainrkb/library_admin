{"ast":null,"code":"'use strict';\n\nvar FORMATS = {\n  y: getYear,\n  Y: getFullYear,\n  m: getMonth,\n  n: getMonthName,\n  f: getMonthFullName,\n  d: getDay,\n  D: getFormattedDay,\n  H: getMilitaryHours,\n  I: getHours,\n  M: getMinutes,\n  S: getSeconds,\n  N: getMillisec,\n  w: getWeekday,\n  W: getFullWeekday,\n  p: getPeriod\n};\nvar PERIOD = {\n  AM: 'AM',\n  PM: 'PM'\n};\nvar WEEKS = {\n  ABB: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  FULL: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n};\nvar MONTHS = {\n  ABB: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  FULL: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n};\nvar ONEDAY = 86400000;\nvar ONEHOUR = 3600000;\n\nfunction DateTime(now, defaultFormat) {\n  this._created = Date.now();\n  this._now = now ? new Date(now) : new Date();\n  this._delta = this._created - this._now.getTime();\n  this._defaultFormat = defaultFormat || null;\n}\n\nDateTime.setWeekNames = function (names) {\n  for (var i = 0, len = names.length; i < len; i++) {\n    if (!names[i]) {\n      continue;\n    }\n\n    WEEKS.FULL[i] = names[i];\n  }\n};\n\nDateTime.setShortWeekNames = function (names) {\n  for (var i = 0, len = names.length; i < len; i++) {\n    if (!names[i]) {\n      continue;\n    }\n\n    WEEKS.ABB[i] = names[i];\n  }\n};\n/**\nperiods [ 'AM', 'PM' ]\n*/\n\n\nDateTime.setPeriod = function (period) {\n  if (period[0]) {\n    PERIOD.AM = period[0];\n  }\n\n  if (period[1]) {\n    PERIOD.PM = period[1];\n  }\n};\n\nDateTime.setMonthNames = function (names) {\n  for (var i = 0, len = names.length; i < len; i++) {\n    if (!names[i]) {\n      continue;\n    }\n\n    MONTHS.FULL[i] = names[i];\n  }\n};\n\nDateTime.setShortMonthNames = function (names) {\n  for (var i = 0, len = names.length; i < len; i++) {\n    if (!names[i]) {\n      continue;\n    }\n\n    MONTHS.ABB[i] = names[i];\n  }\n};\n\nDateTime.prototype.format = function (format) {\n  if (!format && this._defaultFormat) {\n    format = this._defaultFormat;\n  }\n\n  var str = '';\n\n  for (var i = 0, len = format.length; i < len; i++) {\n    str += this._convert(format[i]);\n  }\n\n  return str;\n};\n\nDateTime.prototype.now = function () {\n  return Date.now() - this._delta;\n};\n\nDateTime.prototype.epoch = function () {\n  return Math.floor(this.getTime() / 1000);\n};\n\nDateTime.prototype.getTime = function () {\n  return this._now.getTime();\n};\n\nDateTime.prototype.offsetInDays = function (offset) {\n  var next = new Date(this._now);\n  next.setDate(next.getDate() + offset);\n  this._now = next;\n\n  this._updateDelta();\n};\n\nDateTime.prototype.offsetInHours = function (offset) {\n  var next = new Date(this._now);\n  next.setHours(next.getHours() + offset);\n  this._now = next;\n\n  this._updateDelta();\n};\n\nDateTime.prototype.getDatesInRange = function (dateObj) {\n  var start = this._now;\n  var end = dateObj;\n  var defaultFormat = this._defaultFormat;\n\n  if (dateObj instanceof DateTime) {\n    defaultFormat = defaultFormat || dateObj._defaultFormat;\n    end = dateObj._now;\n  }\n\n  var list = [];\n  var dir = end.getTime() >= start.getTime() ? 1 : -1;\n  var diff = dir === 1 ? end.getTime() - start.getTime() : start.getTime() - end.getTime();\n  var current = new DateTime(start, defaultFormat);\n  var iteration = Math.ceil(diff / ONEDAY);\n\n  for (var i = 0; i <= iteration; i++) {\n    list.push(current);\n    var next = new DateTime(current.getTime(), defaultFormat);\n    next.offsetInDays(1 * dir);\n    current = next;\n  }\n\n  return list;\n};\n\nDateTime.prototype.getHoursInRange = function (dateObj) {\n  var start = this._now;\n  var end = dateObj;\n  var defaultFormat = this._defaultFormat;\n\n  if (dateObj instanceof DateTime) {\n    defaultFormat = defaultFormat || this._defaultFormat;\n    end = dateObj._now;\n  }\n\n  var list = [];\n  var dir = end.getTime() >= start.getTime() ? 1 : -1;\n  var diff = dir === 1 ? end.getTime() - start.getTime() : start.getTime() - end.getTime();\n  var current = new DateTime(start, defaultFormat);\n  var iteration = Math.ceil(diff / ONEHOUR);\n\n  for (var i = 0; i <= iteration; i++) {\n    list.push(current);\n    var next = new DateTime(current.getTime(), defaultFormat);\n    next.offsetInHours(1 * dir);\n    current = next;\n  }\n\n  return list;\n};\n\nDateTime.prototype._convert = function (formatFragment) {\n  var converter = FORMATS[formatFragment];\n\n  if (converter) {\n    return converter(this._now);\n  } // no converter \n\n\n  return formatFragment;\n};\n\nDateTime.prototype._updateDelta = function () {\n  this._delta = this._created - this._now.getTime();\n};\n\nfunction getYear(d) {\n  var year = d.getFullYear().toString();\n  return year.substring(year.length - 2);\n}\n\nfunction getFullYear(d) {\n  return d.getFullYear();\n}\n\nfunction getMonth(d) {\n  return pad(d.getMonth() + 1);\n}\n\nfunction getMonthName(d) {\n  return MONTHS.ABB[d.getMonth()];\n}\n\nfunction getMonthFullName(d) {\n  return MONTHS.FULL[d.getMonth()];\n}\n\nfunction getDay(d) {\n  return pad(d.getDate());\n}\n\nfunction getFormattedDay(d) {\n  var _date = d.getDate();\n\n  if (_date > 10) {\n    return _date.toString() + 'th';\n  }\n\n  var date = _date.toString();\n\n  var lastDigit = parseInt(date[date.length - 1]);\n\n  switch (lastDigit) {\n    case 1:\n      lastDigit += 'st';\n      break;\n\n    case 2:\n      lastDigit += 'nd';\n      break;\n\n    case 3:\n      lastDigit += 'rd';\n      break;\n\n    default:\n      lastDigit += 'th';\n      break;\n  }\n\n  return date.substring(0, date.length - 1) + lastDigit;\n}\n\nfunction getMilitaryHours(d) {\n  return pad(d.getHours());\n}\n\nfunction getHours(d) {\n  var h = d.getHours();\n  var hours = h > 12 ? h - 12 : h;\n  return pad(hours);\n}\n\nfunction getMinutes(d) {\n  return pad(d.getMinutes());\n}\n\nfunction getSeconds(d) {\n  return pad(d.getSeconds());\n}\n\nfunction getMillisec(d) {\n  return mpad(d.getMilliseconds());\n}\n\nfunction getWeekday(d) {\n  return WEEKS.ABB[d.getDay()];\n}\n\nfunction getFullWeekday(d) {\n  return WEEKS.FULL[d.getDay()];\n}\n\nfunction getPeriod(d) {\n  var hours = d.getHours();\n\n  if (hours < 12) {\n    return PERIOD.AM;\n  }\n\n  return PERIOD.PM;\n}\n\nfunction pad(n) {\n  return n < 10 ? '0' + n : n;\n}\n\nfunction mpad(n) {\n  var padded = pad(n);\n  return typeof padded === 'string' || padded < 100 ? '0' + padded : padded;\n}\n\nmodule.exports = DateTime;","map":null,"metadata":{},"sourceType":"script"}